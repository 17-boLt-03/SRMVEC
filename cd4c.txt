%{
#include <stdio.h>
#include <stdlib.h>

int regs[26];  // Array for registers (representing variables A-Z)
int base;      // Base for number interpretation (octal or decimal)
%}

%start list

%token DIGIT LETTER

%left '|'
%left '&'
%left '+' '-'
%left '*' '/' '%'
%left UMINUS  /* Specifies precedence for unary minus */

%%
list: /* empty */
    | list stat '\n'
    | list error '\n' {
        yyerrok;
    }
    ;

stat: expr {
        printf("%d\n", $1);  // Output the result of the expression
    }
    | LETTER '=' expr {
        regs[$1] = $3;  // Store the result in the corresponding register
    }
    ;

expr: '(' expr ')' {
        $$ = $2;  // Parentheses, return the value inside
    }
    | expr '*' expr {
        $$ = $1 * $3;  // Multiplication
    }
    | expr '/' expr {
        $$ = $1 / $3;  // Division
    }
    | expr '%' expr {
        $$ = $1 % $3;  // Modulus
    }
    | expr '+' expr {
        $$ = $1 + $3;  // Addition
    }
    | expr '-' expr {
        $$ = $1 - $3;  // Subtraction
    }
    | expr '&' expr {
        $$ = $1 & $3;  // Bitwise AND
    }
    | expr '|' expr {
        $$ = $1 | $3;  // Bitwise OR
    }
    | '-' expr %prec UMINUS {
        $$ = -$2;  // Unary minus
    }
    | LETTER {
        $$ = regs[$1];  // Load the value from the register (A-Z)
    }
    | number
    ;

number: DIGIT {
        $$ = $1;  // A single digit
        base = ($1 == 0) ? 8 : 10;  // Determine base (octal or decimal)
    }
    | number DIGIT {
        $$ = base * $1 + $2;  // Build the number (handling base)
    }
    ;

%%

int main() {
    return yyparse();  // Start parsing
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);  // Error handling
}

int yywrap() {
    return 1;  // Indicate the end of input
}
