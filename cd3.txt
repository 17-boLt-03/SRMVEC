                                                  lexprogram.l
%{
/* program to recognize a C program */
int COMMENT = 0;
%}

identifier [a-zA-Z_][a-zA-Z0-9_]*
%%

#.* { printf("\n%s is a PREPROCESSOR DIRECTIVE", yytext); }

int | float | char | double | while | for | do | if | break | continue | void | switch | case | long | struct | const | typedef
| return | else | goto
{
    printf("\n\t%s is a KEYWORD", yytext);
}

"/*" { COMMENT = 1; }
"*/" { COMMENT = 0; }

{identifier}\( { 
    if (!COMMENT) 
        printf("\n\nFUNCTION\n\t%s", yytext); 
}

\{ { 
    if (!COMMENT) 
        printf("\nBLOCK BEGINS"); 
}

\} { 
    if (!COMMENT) 
        printf("\nBLOCK ENDS"); 
}

{identifier}(\[[0-9]*\])? { 
    if (!COMMENT) 
        printf("\n%s is an IDENTIFIER", yytext); 
}

\".*\" { 
    if (!COMMENT) 
        printf("\n\t%s is a STRING", yytext); 
}

[0-9]+ { 
    if (!COMMENT) 
        printf("\n\t%s is a NUMBER", yytext); 
}

\)(\;)? { 
    if (!COMMENT) { 
        printf("\n\t"); 
        ECHO; 
        printf("\n"); 
    } 
}

\( { ECHO; }

= { 
    if (!COMMENT) 
        printf("\n\t%s is an ASSIGNMENT OPERATOR", yytext); 
}

\<= | \>= | \< | == | \> { 
    if (!COMMENT) 
        printf("\n\t%s is a RELATIONAL OPERATOR", yytext); 
}

%%

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file;
        file = fopen(argv[1], "r");
        if (!file) {
            printf("Could not open %s \n", argv[1]);
            exit(0);  // Fix: This exit() was missing the correct header, stdlib.h
        }
        yyin = file;
    }
    yylex();
    printf("\n\n");
    return 0;
}

int yywrap() {
    return 0;
}

                                                            input.txt
/* comment line */
#include<stdio.h>
main()
{
    int a,b;
    a=20;
    printf("%d", a);
}
