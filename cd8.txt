#include <stdio.h>
#include <ctype.h>

struct da {
    int ptr, left, right;
    char label;
} dag[25];

int main() {
    int ptr, j, n = 0, i = 0, x, k;
    char store, input1[25], input[25], var;

    // Initialize DAG and arrays
    for (i = 0; i < 25; i++) {
        dag[i].ptr = 0;
        dag[i].left = 0;
        dag[i].right = 0;
        dag[i].label = '\0';
        input1[i] = '\0';
        input[i] = '\0';
    }

    printf("Hint: Provide the expression inside parentheses stating the priority.\n");
    printf("For example: a+b*c is given as (a+(b*c))\n");
    printf("ENTER THE EXPRESSION: ");
    scanf("%s", input1);

    while (1) {
        for (i = 0; input1[i] != '\0'; i++) {
            if (input1[i] == ')')
                break;
        }
        if (input1[i] == '\0') // No closing parenthesis left
            break;
        
        for (j = i; input1[j] != '('; j--);
        
        for (x = j + 1; x < i; x++) {
            if (isalpha(input1[x]))
                input[n++] = input1[x];
            else if (input1[x] != '0')
                store = input1[x];
        }
        input[n++] = store;
        
        for (x = j; x <= i; x++)
            input1[x] = '0';
    }

    for (i = 0; i < n; i++) {
        dag[i].label = input[i];
        dag[i].ptr = i;

        if (!isalpha(input[i]) && !isdigit(input[i])) {
            dag[i].right = i - 1;
            ptr = i;
            var = input[i - 1];
            
            if (isalpha(var))
                ptr = ptr - 2;
            else {
                ptr = i - 1;
                while (1) {
                    if (!isalpha(var) && !isdigit(var)) {
                        ptr = dag[ptr].left;
                        var = input[ptr];
                    } else {
                        ptr = ptr - 1;
                        break;
                    }
                }
            }
            dag[i].left = ptr;
        }
    }

    printf("\nDAG FOR GIVEN EXPRESSION");
    printf("\n\nPTR\tLEFT PTR\tRIGHT PTR\tLABEL");
    
    for (i = 0; i < n; i++) {
        printf("\n%d\t%d\t\t%d\t\t%c", dag[i].ptr, dag[i].left, dag[i].right, dag[i].label);
    }
    printf("\n");

    return 0;
}
