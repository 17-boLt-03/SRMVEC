#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main() {
    int i = 0, j = 0, x = 0, n, flag = 0;
    void *p, *add[15];
    char ch, srch, b[15], d[15], c;

    printf("Expression terminated by $: ");

    // Read input expression
    while ((c = getchar()) != '$' && i < 15) {
        b[i] = c;
        i++;
    }
    n = i - 1;

    // Display the given expression
    printf("\nGiven expression: ");
    for (i = 0; i <= n; i++) {
        printf("%c", b[i]);
    }

    // Symbol table header
    printf("\n\nSymbol table\n");
    printf("Symbol\tAddress\t\tType\n");

    // Process the expression and create the symbol table
    while (j <= n) {
        c = b[j];
        if (isalpha(c)) {
            if (j == n || (b[j + 1] == '/' || b[j + 1] == '+' || b[j + 1] == '-' || b[j + 1] == '*' || b[j + 1] == '=')) {
                p = malloc(1);  // Allocate memory (dummy allocation)
                if (p == NULL) {
                    fprintf(stderr, "Memory allocation failed\n");
                    return 1;
                }
                add[x] = p;
                d[x] = c;
                printf("%c\t%ld\tIdentifier\n", c, (long)p);
                x++;
            }
        }
        j++;
    }

    // Search for an identifier in the symbol table
    printf("Enter the identifier to be searched: ");
    srch = getchar();

    for (i = 0; i < x; i++) {
        if (srch == d[i]) {
            printf("Symbol found: %c @ Address %p\n", srch, add[i]);
            flag = 1;
            break;
        }
    }

    if (!flag) {
        printf("Symbol not found\n");
    }

    // Free allocated memory
    for (i = 0; i < x; i++) {
        free(add[i]);
    }

    return 0;
}